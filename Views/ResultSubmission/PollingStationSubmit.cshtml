@model VcBlazor.Models.ResultSubmissionViewModel
@{
    ViewData["Title"] = "Soumission des Résultats - Bureau de Vote";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas fa-poll-h me-2"></i>
                        Soumission des Résultats Électoraux
                    </h4>
                </div>
                
                <div class="card-body">
                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            @TempData["Success"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            @TempData["Error"]
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    @if (TempData["DatabaseError"] != null)
                    {
                        <div class="alert alert-warning alert-dismissible fade show" role="alert">
                            <i class="fas fa-database me-2"></i>
                            <strong>Problème de connexion à la base de données :</strong><br>
                            @TempData["DatabaseError"]<br>
                            <small class="mt-2 d-block">
                                <i class="fas fa-info-circle me-1"></i>
                                La fonctionnalité de soumission des résultats nécessite une connexion active à la base de données PostgreSQL.
                                Veuillez vérifier la configuration de la base de données dans appsettings.json.
                            </small>
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }

                    <form asp-action="PollingStationSubmit" method="post" id="resultForm" class="needs-validation" novalidate>
                        @Html.AntiForgeryToken()
                        
                        <!-- Informations du Bureau de Vote -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="card border-info">
                                    <div class="card-header bg-info text-white">
                                        <h6 class="mb-0"><i class="fas fa-building me-2"></i>Bureau de Vote</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label asp-for="PollingStationId" class="form-label fw-bold">Bureau de Vote</label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="pollingStationSearch" 
                                                       placeholder="Tapez le nom du bureau, région, département, arrondissement ou commune..." 
                                                       autocomplete="off" />
                                                <button class="btn btn-outline-secondary" type="button" id="clearPollingStation">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                            <input asp-for="PollingStationId" type="hidden" id="selectedPollingStationId" required />
                                            <div id="pollingStationResults" class="list-group mt-2" style="display: none; max-height: 300px; overflow-y: auto;"></div>
                                            <small class="form-text text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Recherchez par nom de bureau, région, département, arrondissement ou commune
                                            </small>
                                            <span asp-validation-for="PollingStationId" class="text-danger"></span>
                                        </div>

                                        <div class="mb-3">
                                            <label asp-for="RegisteredVoters" class="form-label fw-bold"></label>
                                            <input asp-for="RegisteredVoters" class="form-control" id="registeredVoters" readonly />
                                            <span asp-validation-for="RegisteredVoters" class="text-danger"></span>
                                        </div>

                                        <div class="mb-3">
                                            <label asp-for="SubmissionType" class="form-label fw-bold"></label>
                                            <select asp-for="SubmissionType" class="form-select">
                                                <option value="final">Résultats Finaux</option>
                                                <option value="preliminary">Résultats Préliminaires</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="card border-success">
                                    <div class="card-header bg-success text-white">
                                        <h6 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Statistiques Générales</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label asp-for="TotalVotes" class="form-label fw-bold"></label>
                                                    <input asp-for="TotalVotes" class="form-control" id="totalVotes" min="0" required />
                                                    <span asp-validation-for="TotalVotes" class="text-danger"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label class="form-label fw-bold">Taux de participation</label>
                                                    <input type="text" class="form-control" id="turnoutRate" readonly placeholder="0.00%" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label asp-for="BlankVotes" class="form-label fw-bold"></label>
                                                    <input asp-for="BlankVotes" class="form-control" id="blankVotes" min="0" />
                                                    <span asp-validation-for="BlankVotes" class="text-danger"></span>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    <label asp-for="InvalidVotes" class="form-label fw-bold"></label>
                                                    <input asp-for="InvalidVotes" class="form-control" id="invalidVotes" min="0" />
                                                    <span asp-validation-for="InvalidVotes" class="text-danger"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Résultats par Candidat -->
                        <div class="card border-warning mb-4">
                            <div class="card-header bg-warning text-dark">
                                <h5 class="mb-0"><i class="fas fa-users me-2"></i>Résultats par Candidat</h5>
                            </div>
                            <div class="card-body">
                                <!-- Sélection et ajout de candidat -->
                                <div class="row mb-4">
                                    <div class="col-md-5">
                                        <label class="form-label fw-bold">Candidat</label>
                                        <select id="candidateSelect" class="form-select">
                                            <option value="">-- Sélectionner un candidat --</option>
                                            @if (ViewBag.Candidates != null)
                                            {
                                                @foreach (var candidate in ViewBag.Candidates)
                                                {
                                                    <option value="@candidate.Id" 
                                                            data-firstname="@candidate.FirstName" 
                                                            data-lastname="@candidate.LastName" 
                                                            data-party="@candidate.Party">
                                                        @candidate.FirstName @candidate.LastName (@candidate.Party)
                                                    </option>
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Nombre de voix</label>
                                        <input type="number" id="candidateVotes" class="form-control" min="0" placeholder="Saisir le nombre de voix" />
                                    </div>
                                    <div class="col-md-3 d-flex align-items-end">
                                        <button type="button" id="addCandidateResult" class="btn btn-primary">
                                            <i class="fas fa-plus me-2"></i>Ajouter
                                        </button>
                                    </div>
                                </div>

                                <!-- Liste des résultats ajoutés -->
                                <div id="candidateResults">
                                    <div class="table-responsive">
                                        <table class="table table-hover" id="candidateResultsTable">
                                            <thead class="table-primary">
                                                <tr>
                                                    <th><i class="fas fa-user me-1"></i>Candidat</th>
                                                    <th><i class="fas fa-flag me-1"></i>Parti</th>
                                                    <th><i class="fas fa-vote-yea me-1"></i>Voix</th>
                                                    <th><i class="fas fa-percentage me-1"></i>%</th>
                                                    <th><i class="fas fa-cog me-1"></i>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="candidateResultsBody">
                                                <!-- Les résultats seront ajoutés ici dynamiquement -->
                                            </tbody>
                                        </table>
                                    </div>
                                    
                                    <div id="noCandidatesMessage" class="alert alert-info text-center">
                                        <i class="fas fa-info-circle me-2"></i>
                                        <strong>Aucun résultat ajouté</strong><br>
                                        Sélectionnez un candidat et saisissez le nombre de voix, puis cliquez sur "Ajouter".
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Validation Summary -->
                        <div class="card border-danger mb-4" id="validationSummary" style="display: none;">
                            <div class="card-header bg-danger text-white">
                                <h6 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>Erreurs de Validation</h6>
                            </div>
                            <div class="card-body">
                                <ul id="validationErrors" class="mb-0"></ul>
                            </div>
                        </div>

                        <!-- Observations -->
                        <div class="mb-4">
                            <label asp-for="Notes" class="form-label fw-bold"></label>
                            <textarea asp-for="Notes" class="form-control" rows="4" 
                                      placeholder="Observations ou commentaires sur le processus de vote..."></textarea>
                            <span asp-validation-for="Notes" class="text-danger"></span>
                        </div>

                        <!-- Actions -->
                        <div class="d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Retour à la liste
                            </a>
                            
                            <div>
                                <button type="button" class="btn btn-outline-primary me-2" id="validateBtn">
                                    <i class="fas fa-check me-2"></i>Valider les données
                                </button>
                                <button type="submit" class="btn btn-success" id="submitBtn">
                                    <i class="fas fa-paper-plane me-2"></i>Soumettre les résultats
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variables globales
            let searchTimeout;
            let candidateResultsCount = 0;
            let selectedCandidates = [];

            // Éléments du DOM
            const pollingStationSearch = document.getElementById('pollingStationSearch');
            const pollingStationResults = document.getElementById('pollingStationResults');
            const selectedPollingStationId = document.getElementById('selectedPollingStationId');
            const clearPollingStation = document.getElementById('clearPollingStation');
            const registeredVotersInput = document.getElementById('registeredVoters');
            const totalVotesInput = document.getElementById('totalVotes');
            const turnoutRateInput = document.getElementById('turnoutRate');
            const candidateSelect = document.getElementById('candidateSelect');
            const candidateVotesInput = document.getElementById('candidateVotes');
            const addCandidateResultBtn = document.getElementById('addCandidateResult');
            const candidateResultsBody = document.getElementById('candidateResultsBody');
            const noCandidatesMessage = document.getElementById('noCandidatesMessage');

            // RECHERCHE DE BUREAU DE VOTE
            pollingStationSearch.addEventListener('input', function() {
                const term = this.value.trim();
                
                clearTimeout(searchTimeout);
                
                if (term.length < 2) {
                    pollingStationResults.style.display = 'none';
                    return;
                }

                searchTimeout = setTimeout(() => {
                    fetch(`/ResultSubmission/SearchPollingStations?term=${encodeURIComponent(term)}`)
                        .then(response => response.json())
                        .then(data => {
                            displayPollingStationResults(data);
                        })
                        .catch(error => {
                            console.error('Erreur de recherche:', error);
                        });
                }, 300);
            });

            function displayPollingStationResults(stations) {
                pollingStationResults.innerHTML = '';
                
                if (stations.length === 0) {
                    pollingStationResults.innerHTML = '<div class="list-group-item text-muted">Aucun bureau trouvé</div>';
                } else {
                    stations.forEach(station => {
                        const item = document.createElement('a');
                        item.className = 'list-group-item list-group-item-action';
                        item.href = '#';
                        item.innerHTML = `
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">${station.name}</h6>
                                <small class="text-muted">${station.registeredVoters} électeurs</small>
                            </div>
                            <p class="mb-1 small text-muted">${station.fullLocation}</p>
                            <small>Adresse: ${station.address}</small>
                        `;
                        
                        item.addEventListener('click', function(e) {
                            e.preventDefault();
                            selectPollingStation(station);
                        });
                        
                        pollingStationResults.appendChild(item);
                    });
                }
                
                pollingStationResults.style.display = 'block';
            }

            function selectPollingStation(station) {
                pollingStationSearch.value = `${station.name} (${station.registeredVoters} électeurs)`;
                selectedPollingStationId.value = station.id;
                registeredVotersInput.value = station.registeredVoters;
                pollingStationResults.style.display = 'none';
                calculateTurnoutRate();
            }

            clearPollingStation.addEventListener('click', function() {
                pollingStationSearch.value = '';
                selectedPollingStationId.value = '';
                registeredVotersInput.value = '';
                pollingStationResults.style.display = 'none';
            });

            // GESTION DES CANDIDATS
            addCandidateResultBtn.addEventListener('click', function() {
                const candidateId = candidateSelect.value;
                const votes = parseInt(candidateVotesInput.value) || 0;
                
                if (!candidateId) {
                    alert('Veuillez sélectionner un candidat');
                    return;
                }
                
                if (votes < 0) {
                    alert('Le nombre de voix ne peut pas être négatif');
                    return;
                }
                
                if (selectedCandidates.includes(candidateId)) {
                    alert('Ce candidat a déjà été ajouté');
                    return;
                }
                
                const selectedOption = candidateSelect.options[candidateSelect.selectedIndex];
                addCandidateResult({
                    id: candidateId,
                    firstName: selectedOption.getAttribute('data-firstname'),
                    lastName: selectedOption.getAttribute('data-lastname'),
                    party: selectedOption.getAttribute('data-party'),
                    votes: votes
                });
                
                // Reset form
                candidateSelect.value = '';
                candidateVotesInput.value = '';
            });

            function addCandidateResult(candidate) {
                selectedCandidates.push(candidate.id);
                
                const row = document.createElement('tr');
                
                // Création sécurisée du contenu HTML
                const candidateCell = document.createElement('td');
                candidateCell.innerHTML = `
                    <div class="d-flex align-items-center">
                        <div class="candidate-avatar me-2">
                            <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" 
                                 style="width: 32px; height: 32px; font-size: 12px;">
                                ${(candidate.firstName || '')[0] || ''}${(candidate.lastName || '')[0] || ''}
                            </div>
                        </div>
                        <div>
                            <div class="fw-bold"></div>
                        </div>
                    </div>
                `;
                
                // Définir le nom de manière sécurisée
                const nameDiv = candidateCell.querySelector('.fw-bold');
                nameDiv.textContent = `${candidate.firstName || ''} ${candidate.lastName || ''}`;
                
                // Ajouter les champs cachés
                const hiddenFields = [
                    { name: `CandidateResults[${candidateResultsCount}].CandidateId`, value: candidate.id },
                    { name: `CandidateResults[${candidateResultsCount}].CandidateName`, value: `${candidate.firstName || ''} ${candidate.lastName || ''}` },
                    { name: `CandidateResults[${candidateResultsCount}].Party`, value: candidate.party || '' }
                ];
                
                hiddenFields.forEach(field => {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = field.name;
                    input.value = field.value;
                    candidateCell.appendChild(input);
                });
                
                // Cellule du parti
                const partyCell = document.createElement('td');
                const partyBadge = document.createElement('span');
                partyBadge.className = 'badge bg-secondary';
                partyBadge.textContent = candidate.party || '';
                partyCell.appendChild(partyBadge);
                
                // Cellule des votes
                const votesCell = document.createElement('td');
                const votesInput = document.createElement('input');
                votesInput.type = 'number';
                votesInput.name = `CandidateResults[${candidateResultsCount}].Votes`;
                votesInput.className = 'form-control candidate-votes';
                votesInput.value = candidate.votes;
                votesInput.min = '0';
                votesInput.setAttribute('data-candidate-id', candidate.id);
                votesInput.style.width = '100px';
                votesCell.appendChild(votesInput);
                
                // Cellule du pourcentage
                const percentageCell = document.createElement('td');
                const percentageSpan = document.createElement('span');
                percentageSpan.className = 'candidate-percentage fw-bold';
                percentageSpan.textContent = '0.00%';
                const percentageHidden = document.createElement('input');
                percentageHidden.type = 'hidden';
                percentageHidden.name = `CandidateResults[${candidateResultsCount}].Percentage`;
                percentageHidden.className = 'candidate-percentage-input';
                percentageHidden.value = '0';
                percentageCell.appendChild(percentageSpan);
                percentageCell.appendChild(percentageHidden);
                
                // Cellule d'action
                const actionCell = document.createElement('td');
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'btn btn-sm btn-outline-danger remove-candidate';
                removeButton.setAttribute('data-candidate-id', candidate.id);
                removeButton.innerHTML = '<i class="fas fa-trash"></i>';
                actionCell.appendChild(removeButton);
                
                // Assembler la rangée
                row.appendChild(candidateCell);
                row.appendChild(partyCell);
                row.appendChild(votesCell);
                row.appendChild(percentageCell);
                row.appendChild(actionCell);
                
                candidateResultsBody.appendChild(row);
                candidateResultsCount++;
                
                // Event listener pour suppression
                row.querySelector('.remove-candidate').addEventListener('click', function() {
                    removeCandidateResult(candidate.id, row);
                });
                
                // Event listener pour calcul automatique
                row.querySelector('.candidate-votes').addEventListener('input', calculatePercentages);
                
                updateCandidatesDisplay();
                calculatePercentages();
            }

            function removeCandidateResult(candidateId, row) {
                selectedCandidates = selectedCandidates.filter(id => id !== candidateId);
                row.remove();
                updateCandidatesDisplay();
                calculatePercentages();
            }

            function updateCandidatesDisplay() {
                if (selectedCandidates.length === 0) {
                    noCandidatesMessage.style.display = 'block';
                } else {
                    noCandidatesMessage.style.display = 'none';
                }
            }

            // CALCULS AUTOMATIQUES
            function calculateTurnoutRate() {
                const registered = parseInt(registeredVotersInput.value) || 0;
                const total = parseInt(totalVotesInput.value) || 0;
                
                if (registered > 0) {
                    const rate = (total / registered * 100).toFixed(2);
                    turnoutRateInput.value = rate + '%';
                }
            }

            function calculatePercentages() {
                const totalVotes = parseInt(totalVotesInput.value) || 0;
                
                document.querySelectorAll('.candidate-votes').forEach(input => {
                    const votes = parseInt(input.value) || 0;
                    const percentage = totalVotes > 0 ? (votes / totalVotes * 100).toFixed(2) : '0.00';
                    
                    const row = input.closest('tr');
                    const percentageSpan = row.querySelector('.candidate-percentage');
                    const percentageInput = row.querySelector('.candidate-percentage-input');
                    
                    percentageSpan.textContent = percentage + '%';
                    percentageInput.value = parseFloat(percentage);
                });
            }

            // Event listeners pour calculs automatiques
            if (totalVotesInput) {
                totalVotesInput.addEventListener('input', function() {
                    calculateTurnoutRate();
                    calculatePercentages();
                });
            }

            // Fermer les résultats de recherche si clic extérieur
            document.addEventListener('click', function(e) {
                if (!pollingStationSearch.contains(e.target) && !pollingStationResults.contains(e.target)) {
                    pollingStationResults.style.display = 'none';
                }
            });

            // Initialisation
            updateCandidatesDisplay();
        });
    </script>
}