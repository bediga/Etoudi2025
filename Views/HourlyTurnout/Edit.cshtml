@model VcBlazor.Data.Entities.HourlyTurnout

@{
    ViewData["Title"] = "Modifier Relevé - ETOUDI 2025";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- En-tête -->
            <div class="d-flex align-items-center mb-4">
                <a asp-action="Index" class="btn btn-outline-secondary me-3">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <div class="flex-grow-1">
                    <h2 class="h3 mb-1">
                        <i class="fas fa-edit text-primary"></i>
                        Modifier le Relevé d'Affluence
                    </h2>
                    <p class="text-muted mb-0">Modification des données d'affluence horaire</p>
                </div>
                <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-outline-info">
                    <i class="fas fa-eye"></i> Voir Détails
                </a>
            </div>

            <!-- Alerte d'information -->
            <div class="alert alert-info border-0 shadow-sm mb-4" role="alert">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Relevé actuel:</strong> Heure @Model.Hour:00 - @Model.VotersCount votants - 
                Enregistré le @Model.RecordedAt.ToString("dd/MM/yyyy HH:mm")
            </div>

            <form asp-action="Edit" method="post" id="editForm" class="needs-validation" novalidate>
                <input asp-for="Id" type="hidden" />
                
                <div class="row">
                    <!-- Colonne principale -->
                    <div class="col-lg-8">
                        <!-- Informations de base -->
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-info-circle me-2"></i>Informations du Relevé
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label asp-for="PollingStationId" class="form-label required">
                                            <i class="fas fa-map-marker-alt me-2"></i>Bureau de Vote
                                        </label>
                                        <select asp-for="PollingStationId" class="form-select form-select-lg" 
                                                asp-items="ViewBag.PollingStations" required>
                                            <option value="">-- Sélectionner un bureau --</option>
                                        </select>
                                        <span asp-validation-for="PollingStationId" class="text-danger"></span>
                                        <div class="form-text">Bureau de vote concerné</div>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label asp-for="Hour" class="form-label required">
                                            <i class="fas fa-clock me-2"></i>Heure du Relevé
                                        </label>
                                        <select asp-for="Hour" class="form-select form-select-lg" required>
                                            <option value="">-- Sélectionner l'heure --</option>
                                            @for (int h = 7; h <= 18; h++)
                                            {
                                                <option value="@h" selected="@(Model.Hour == h)">@h:00 - @(h+1):00</option>
                                            }
                                        </select>
                                        <span asp-validation-for="Hour" class="text-danger"></span>
                                        <div class="form-text">Créneau horaire (7h - 18h)</div>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label asp-for="VotersCount" class="form-label required">
                                            <i class="fas fa-users me-2"></i>Votants (Cette Heure)
                                        </label>
                                        <input asp-for="VotersCount" type="number" 
                                               class="form-control form-control-lg" 
                                               min="0" max="5000" required 
                                               oninput="updateCumulative()" />
                                        <span asp-validation-for="VotersCount" class="text-danger"></span>
                                        <div class="form-text">Nouveaux votants sur ce créneau</div>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label asp-for="CumulativeCount" class="form-label">
                                            <i class="fas fa-chart-line me-2"></i>Cumul Total
                                        </label>
                                        <input asp-for="CumulativeCount" type="number" 
                                               class="form-control form-control-lg" 
                                               min="0" oninput="updateTurnoutRate()" />
                                        <span asp-validation-for="CumulativeCount" class="text-danger"></span>
                                        <div class="form-text">Total cumulé depuis l'ouverture</div>
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-percentage me-2"></i>Taux de Participation
                                        </label>
                                        <div class="input-group">
                                            <input type="text" id="turnoutDisplay" 
                                                   class="form-control form-control-lg text-center fw-bold" 
                                                   value="@Model.TurnoutRate.ToString("F1")%" readonly />
                                            <span class="input-group-text">
                                                <i id="turnoutIcon" class="fas fa-chart-line"></i>
                                            </span>
                                        </div>
                                        <div class="form-text">Calculé automatiquement</div>
                                        <input asp-for="TurnoutRate" type="hidden" id="turnoutRateHidden" />
                                    </div>

                                    <div class="col-md-6 mb-3">
                                        <label asp-for="RecordedBy" class="form-label">
                                            <i class="fas fa-user me-2"></i>Enregistré par
                                        </label>
                                        <select asp-for="RecordedBy" class="form-select form-select-lg" 
                                                asp-items="ViewBag.Users">
                                            <option value="">-- Sélectionner un utilisateur --</option>
                                        </select>
                                        <span asp-validation-for="RecordedBy" class="text-danger"></span>
                                        <div class="form-text">Utilisateur responsable du relevé</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Aperçu en temps réel -->
                        <div class="card border-0 shadow-sm mb-4">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-chart-bar me-2"></i>Aperçu des Modifications
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row text-center">
                                    <div class="col-md-4">
                                        <div class="border rounded p-3 bg-light">
                                            <i class="fas fa-users fa-2x text-primary mb-2"></i>
                                            <h3 id="displayVoters" class="mb-1">@Model.VotersCount</h3>
                                            <p class="text-muted mb-0">Votants/Heure</p>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="border rounded p-3 bg-light">
                                            <i class="fas fa-chart-line fa-2x text-success mb-2"></i>
                                            <h3 id="displayCumulative" class="mb-1">@Model.CumulativeCount</h3>
                                            <p class="text-muted mb-0">Total Cumulé</p>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="border rounded p-3 bg-light">
                                            <i id="displayTurnoutIcon" class="fas fa-percentage fa-2x text-warning mb-2"></i>
                                            <h3 id="displayTurnoutRate" class="mb-1">@Model.TurnoutRate.ToString("F1")%</h3>
                                            <p class="text-muted mb-0">Taux Participation</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Barre de progression -->
                                <div class="mt-3">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <label class="form-label mb-0">Progression du Vote</label>
                                        <span id="progressText" class="badge bg-secondary">
                                            @Model.CumulativeCount votes
                                        </span>
                                    </div>
                                    <div class="progress" style="height: 20px;">
                                        <div id="progressBar" 
                                             class="progress-bar bg-@(Model.TurnoutRate >= 70 ? "success" : Model.TurnoutRate >= 50 ? "warning" : "danger")" 
                                             role="progressbar" 
                                             style="width: @Model.TurnoutRate.ToString("F1", System.Globalization.CultureInfo.InvariantCulture)%"
                                             aria-valuenow="@Model.TurnoutRate" 
                                             aria-valuemin="0" 
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Panneau latéral -->
                    <div class="col-lg-4">
                        <!-- Actions de sauvegarde -->
                        <div class="card border-0 shadow-sm mb-4 sticky-top">
                            <div class="card-header bg-warning text-dark">
                                <h5 class="mb-0">
                                    <i class="fas fa-save me-2"></i>Actions
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-success btn-lg">
                                        <i class="fas fa-check me-2"></i>Enregistrer Modifications
                                    </button>
                                    <a asp-action="Details" asp-route-id="@Model.Id" 
                                       class="btn btn-outline-secondary">
                                        <i class="fas fa-times me-2"></i>Annuler
                                    </a>
                                    <hr>
                                    <a asp-action="Index" class="btn btn-outline-primary">
                                        <i class="fas fa-list me-2"></i>Retour à la Liste
                                    </a>
                                </div>

                                <!-- Validation en temps réel -->
                                <div class="mt-3 p-3 bg-light rounded">
                                    <h6 class="text-muted mb-2">
                                        <i class="fas fa-shield-alt me-2"></i>Validation
                                    </h6>
                                    <div id="validationStatus">
                                        <small class="text-muted">Vérification en cours...</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Historique -->
                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-info text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-history me-2"></i>Historique
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="small">
                                    <div class="mb-2">
                                        <strong>ID:</strong> @Model.Id<br>
                                        <strong>Créé le:</strong> @Model.RecordedAt.ToString("dd/MM/yyyy HH:mm")
                                    </div>
                                    @if (Model.RecordedByUser != null)
                                    {
                                        <div class="mb-2">
                                            <strong>Par:</strong> @Model.RecordedByUser.FirstName @Model.RecordedByUser.LastName
                                        </div>
                                    }
                                    
                                    <div class="alert alert-warning alert-sm mt-3">
                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                        <strong>Attention:</strong> Modifiez uniquement si nécessaire.
                                        Les changements sont permanents.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Mise à jour automatique du cumul
        function updateCumulative() {
            const votersCount = parseInt(document.querySelector('[name="VotersCount"]').value) || 0;
            const cumulativeInput = document.querySelector('[name="CumulativeCount"]');
            
            // Si le cumul est inférieur aux votants de cette heure, l'ajuster
            const currentCumulative = parseInt(cumulativeInput.value) || 0;
            if (currentCumulative < votersCount) {
                cumulativeInput.value = votersCount;
            }
            
            updateTurnoutRate();
            updateVisualization();
        }

        // Mise à jour du taux de participation
        function updateTurnoutRate() {
            const cumulative = parseInt(document.querySelector('[name="CumulativeCount"]').value) || 0;
            
            // Simulation : 1000 électeurs inscrits (à récupérer via API en production)
            const registeredVoters = 1000;
            
            let turnoutRate = 0;
            if (registeredVoters > 0) {
                turnoutRate = Math.min((cumulative / registeredVoters) * 100, 100);
            }
            
            // Mise à jour de l'affichage
            const displayElement = document.getElementById('turnoutDisplay');
            const hiddenElement = document.getElementById('turnoutRateHidden');
            const turnoutIcon = document.getElementById('turnoutIcon');
            
            displayElement.value = turnoutRate.toFixed(1) + '%';
            hiddenElement.value = turnoutRate.toFixed(2);
            
            // Couleurs selon le taux
            if (turnoutRate >= 70) {
                displayElement.className = 'form-control form-control-lg text-center fw-bold text-success';
                turnoutIcon.className = 'fas fa-arrow-up text-success';
            } else if (turnoutRate >= 50) {
                displayElement.className = 'form-control form-control-lg text-center fw-bold text-warning';
                turnoutIcon.className = 'fas fa-minus text-warning';
            } else {
                displayElement.className = 'form-control form-control-lg text-center fw-bold text-danger';
                turnoutIcon.className = 'fas fa-arrow-down text-danger';
            }
            
            updateValidationStatus();
            updateVisualization();
        }

        // Mise à jour de la visualisation
        function updateVisualization() {
            const votersCount = parseInt(document.querySelector('[name="VotersCount"]').value) || 0;
            const cumulative = parseInt(document.querySelector('[name="CumulativeCount"]').value) || 0;
            const turnoutRate = parseFloat(document.getElementById('turnoutRateHidden').value) || 0;
            
            // Mise à jour des valeurs affichées
            document.getElementById('displayVoters').textContent = votersCount.toLocaleString();
            document.getElementById('displayCumulative').textContent = cumulative.toLocaleString();
            document.getElementById('displayTurnoutRate').textContent = turnoutRate.toFixed(1) + '%';
            document.getElementById('progressText').textContent = cumulative + ' votes';
            
            // Mise à jour de la barre de progression
            const progressBar = document.getElementById('progressBar');
            const displayTurnoutIcon = document.getElementById('displayTurnoutIcon');
            
            progressBar.style.width = turnoutRate.toFixed(1) + '%';
            progressBar.setAttribute('aria-valuenow', turnoutRate.toFixed(1));
            
            // Couleurs de la progression
            if (turnoutRate >= 70) {
                progressBar.className = 'progress-bar bg-success';
                displayTurnoutIcon.className = 'fas fa-arrow-up fa-2x text-success mb-2';
            } else if (turnoutRate >= 50) {
                progressBar.className = 'progress-bar bg-warning';
                displayTurnoutIcon.className = 'fas fa-minus fa-2x text-warning mb-2';
            } else {
                progressBar.className = 'progress-bar bg-danger';
                displayTurnoutIcon.className = 'fas fa-arrow-down fa-2x text-danger mb-2';
            }
        }

        // Validation en temps réel
        function updateValidationStatus() {
            const stationId = document.querySelector('[name="PollingStationId"]').value;
            const hour = document.querySelector('[name="Hour"]').value;
            const votersCount = parseInt(document.querySelector('[name="VotersCount"]').value) || 0;
            const cumulative = parseInt(document.querySelector('[name="CumulativeCount"]').value) || 0;
            
            const validationStatus = document.getElementById('validationStatus');
            let isValid = true;
            let messages = [];
            
            // Vérifications
            if (!stationId) {
                isValid = false;
                messages.push('⚠️ Bureau de vote requis');
            }
            
            if (!hour) {
                isValid = false;
                messages.push('⚠️ Heure requise');
            }
            
            if (votersCount < 0) {
                isValid = false;
                messages.push('⚠️ Nombre de votants invalide');
            }
            
            if (cumulative < votersCount) {
                isValid = false;
                messages.push('⚠️ Cumul < Votants de l\'heure');
            }
            
            // Affichage du statut
            if (isValid && messages.length === 0) {
                validationStatus.innerHTML = '<small class="text-success"><i class="fas fa-check-circle me-1"></i>Modifications valides</small>';
                document.querySelector('button[type="submit"]').disabled = false;
            } else {
                const messageHtml = messages.map(msg => `<small class="text-warning d-block">${msg}</small>`).join('');
                validationStatus.innerHTML = messageHtml || '<small class="text-muted">Vérification en cours...</small>';
                document.querySelector('button[type="submit"]').disabled = messages.length > 0;
            }
        }

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            // Mise à jour initiale
            updateTurnoutRate();
            updateVisualization();
            
            // Écoute des changements
            document.querySelectorAll('input, select').forEach(element => {
                element.addEventListener('input', updateValidationStatus);
                element.addEventListener('change', updateValidationStatus);
            });
            
            // Validation Bootstrap
            const forms = document.querySelectorAll('.needs-validation');
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        });

        // Confirmation avant quitter si modifications non sauvées
        let formChanged = false;
        document.querySelectorAll('input, select, textarea').forEach(element => {
            element.addEventListener('change', function() {
                formChanged = true;
            });
        });

        window.addEventListener('beforeunload', function(e) {
            if (formChanged) {
                e.preventDefault();
                e.returnValue = 'Vous avez des modifications non sauvegardées. Êtes-vous sûr de vouloir quitter ?';
            }
        });

        document.getElementById('editForm').addEventListener('submit', function() {
            formChanged = false;
        });
    </script>
}

<style>
    .required::after {
        content: " *";
        color: #dc3545;
    }
    
    .form-control:focus,
    .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    }
    
    .progress {
        border-radius: 0.5rem;
        background-color: #e9ecef;
    }
    
    .progress-bar {
        transition: width 0.3s ease, background-color 0.3s ease;
    }
    
    .card-header {
        border-bottom: none;
        font-weight: 600;
    }
    
    .sticky-top {
        top: 20px;
    }
    
    .btn-lg {
        padding: 0.75rem 1.5rem;
        font-size: 1.1rem;
    }
    
    .alert-sm {
        padding: 0.5rem;
        font-size: 0.875rem;
    }
    
    @@media (max-width: 768px) {
        .sticky-top {
            position: relative !important;
            top: auto !important;
        }
    }
</style>