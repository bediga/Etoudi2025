// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VcBlazor.Data;

#nullable disable

namespace VcBlazor.Migrations
{
    [DbContext(typeof(Vc2025DbContext))]
    [Migration("20250914234153_AddTestUser")]
    partial class AddTestUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VcBlazor.Data.Entities.AdministrativeDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("administrative_divisions");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Arrondissement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("arrondissements");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.BureauAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<int>("AssignedBy")
                        .HasColumnType("integer")
                        .HasColumnName("assigned_by");

                    b.Property<string>("AssignmentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("assignment_type");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("PollingStationId");

                    b.HasIndex("UserId", "PollingStationId")
                        .IsUnique();

                    b.ToTable("bureau_assignments");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Education")
                        .HasColumnType("text")
                        .HasColumnName("education");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Experience")
                        .HasColumnType("text")
                        .HasColumnName("experience");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Party")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("party");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.Property<string>("Profession")
                        .HasColumnType("text")
                        .HasColumnName("profession");

                    b.Property<string>("Program")
                        .HasColumnType("text")
                        .HasColumnName("program");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("integer")
                        .HasColumnName("total_votes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("candidates");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Commune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArrondissementId")
                        .HasColumnType("integer")
                        .HasColumnName("arrondissement_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ArrondissementId");

                    b.ToTable("communes");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ElectionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("percentage");

                    b.Property<int?>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("integer")
                        .HasColumnName("total_votes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("text")
                        .HasColumnName("verification_notes");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("votes");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PollingStationId");

                    b.ToTable("election_results");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.HourlyTurnout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CumulativeCount")
                        .HasColumnType("integer")
                        .HasColumnName("cumulative_count");

                    b.Property<int>("Hour")
                        .HasColumnType("integer")
                        .HasColumnName("hour");

                    b.Property<int>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recorded_at");

                    b.Property<int?>("RecordedBy")
                        .HasColumnType("integer")
                        .HasColumnName("recorded_by");

                    b.Property<double>("TurnoutRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("turnout_rate");

                    b.Property<int>("VotersCount")
                        .HasColumnType("integer")
                        .HasColumnName("voters_count");

                    b.HasKey("Id");

                    b.HasIndex("RecordedBy");

                    b.HasIndex("PollingStationId", "Hour")
                        .IsUnique();

                    b.ToTable("hourly_turnout", t =>
                        {
                            t.HasCheckConstraint("CK_HourlyTurnout_Hour", "hour >= 0 AND hour <= 23");
                        });
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.PollingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Arrondissement")
                        .HasColumnType("text")
                        .HasColumnName("arrondissement");

                    b.Property<string>("Commune")
                        .HasColumnType("text")
                        .HasColumnName("commune");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ObserversCount")
                        .HasColumnType("integer")
                        .HasColumnName("observers_count");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<int>("RegisteredVoters")
                        .HasColumnType("integer")
                        .HasColumnName("registered_voters");

                    b.Property<int>("ScrutineersCount")
                        .HasColumnType("integer")
                        .HasColumnName("scrutineers_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<double>("TurnoutRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("turnout_rate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VotesSubmitted")
                        .HasColumnType("integer")
                        .HasColumnName("votes_submitted");

                    b.HasKey("Id");

                    b.ToTable("polling_stations");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.PollingStationHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RegisteredVoters")
                        .HasColumnType("integer")
                        .HasColumnName("registered_voters");

                    b.Property<int>("StationNumber")
                        .HasColumnType("integer")
                        .HasColumnName("station_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<double>("TurnoutRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("turnout_rate");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VotesSubmitted")
                        .HasColumnType("integer")
                        .HasColumnName("votes_submitted");

                    b.Property<int>("VotingCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("voting_center_id");

                    b.HasKey("Id");

                    b.HasIndex("VotingCenterId");

                    b.ToTable("polling_stations_hierarchy");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("regions");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("candidate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<int?>("SubmittedBy")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("text")
                        .HasColumnName("verification_notes");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean")
                        .HasColumnName("verified");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("votes");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("PollingStationId");

                    b.HasIndex("SubmittedBy");

                    b.ToTable("results");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ResultSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<int>("RegisteredVoters")
                        .HasColumnType("integer")
                        .HasColumnName("registered_voters");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("SubmissionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("submission_type");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("submitted_at");

                    b.Property<int>("SubmittedBy")
                        .HasColumnType("integer")
                        .HasColumnName("submitted_by");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("integer")
                        .HasColumnName("total_votes");

                    b.Property<double>("TurnoutRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("turnout_rate");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<int?>("VerifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("verified_by");

                    b.HasKey("Id");

                    b.HasIndex("PollingStationId");

                    b.HasIndex("SubmittedBy");

                    b.HasIndex("VerifiedBy");

                    b.ToTable("result_submissions");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ResultSubmissionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("candidate_id");

                    b.Property<double>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("double precision")
                        .HasColumnName("percentage");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.Property<int>("Votes")
                        .HasColumnType("integer")
                        .HasColumnName("votes");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SubmissionId", "CandidateId")
                        .IsUnique();

                    b.ToTable("result_submission_details");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Role", "Permission")
                        .IsUnique();

                    b.ToTable("role_permissions");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.SubmissionDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Checksum")
                        .HasColumnType("text")
                        .HasColumnName("checksum");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("document_type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<bool>("IsImage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_image");

                    b.Property<string>("MimeType")
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("text")
                        .HasColumnName("original_file_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.Property<int?>("UploadedBy")
                        .HasColumnType("integer")
                        .HasColumnName("uploaded_by");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("submission_documents");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.SubmissionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("integer")
                        .HasColumnName("candidate_id");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.Property<int>("VotesReceived")
                        .HasColumnType("integer")
                        .HasColumnName("votes_received");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("submission_results");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Arrondissement")
                        .HasColumnType("text")
                        .HasColumnName("arrondissement");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text")
                        .HasColumnName("avatarPath");

                    b.Property<string>("Commune")
                        .HasColumnType("text")
                        .HasColumnName("commune");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("boolean")
                        .HasColumnName("must_change_password");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_changed_at");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PollingStationId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.UserAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssociationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("association_type");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("commune_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int?>("PollingStationId")
                        .HasColumnType("integer")
                        .HasColumnName("polling_station_id");

                    b.Property<int?>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PollingStationId");

                    b.HasIndex("UserId");

                    b.ToTable("user_associations");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VerificationHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<int>("CheckerId")
                        .HasColumnType("integer")
                        .HasColumnName("checker_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("Id");

                    b.HasIndex("CheckerId");

                    b.HasIndex("TaskId");

                    b.ToTable("verification_history");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VerificationTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_date");

                    b.Property<int?>("CheckerId")
                        .HasColumnType("integer")
                        .HasColumnName("checker_id");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completion_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("integer")
                        .HasColumnName("submission_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VerificationDecision")
                        .HasColumnType("text")
                        .HasColumnName("verification_decision");

                    b.Property<string>("VerificationNotes")
                        .HasColumnType("text")
                        .HasColumnName("verification_notes");

                    b.HasKey("Id");

                    b.HasIndex("CheckerId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("verification_tasks");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VotingCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<int>("CommuneId")
                        .HasColumnType("integer")
                        .HasColumnName("commune_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PollingStationsCount")
                        .HasColumnType("integer")
                        .HasColumnName("polling_stations_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.ToTable("voting_centers");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.AdministrativeDivision", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.AdministrativeDivision", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Arrondissement", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Department", "Department")
                        .WithMany("Arrondissements")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.BureauAssignment", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.User", "AssignedByUser")
                        .WithMany("AssignedByUser")
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.PollingStationHierarchy", "PollingStationHierarchy")
                        .WithMany("BureauAssignments")
                        .HasForeignKey("PollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "User")
                        .WithMany("UserAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("PollingStationHierarchy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Commune", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Arrondissement", "Arrondissement")
                        .WithMany("Communes")
                        .HasForeignKey("ArrondissementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arrondissement");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Department", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Region", "Region")
                        .WithMany("Departments")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ElectionResult", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Candidate", "Candidate")
                        .WithMany("ElectionResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("ElectionResults")
                        .HasForeignKey("PollingStationId");

                    b.Navigation("Candidate");

                    b.Navigation("PollingStation");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.HourlyTurnout", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("HourlyTurnouts")
                        .HasForeignKey("PollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "RecordedByUser")
                        .WithMany("RecordedTurnouts")
                        .HasForeignKey("RecordedBy");

                    b.Navigation("PollingStation");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.PollingStationHierarchy", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.VotingCenter", "VotingCenter")
                        .WithMany("PollingStationsHierarchy")
                        .HasForeignKey("VotingCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VotingCenter");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Result", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Candidate", "Candidate")
                        .WithMany("Results")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("Results")
                        .HasForeignKey("PollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedResultsSimple")
                        .HasForeignKey("SubmittedBy");

                    b.Navigation("Candidate");

                    b.Navigation("PollingStation");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ResultSubmission", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("ResultSubmissions")
                        .HasForeignKey("PollingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "SubmittedByUser")
                        .WithMany("SubmittedResults")
                        .HasForeignKey("SubmittedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "VerifiedByUser")
                        .WithMany("VerifiedResults")
                        .HasForeignKey("VerifiedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PollingStation");

                    b.Navigation("SubmittedByUser");

                    b.Navigation("VerifiedByUser");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ResultSubmissionDetail", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Candidate", "Candidate")
                        .WithMany("ResultSubmissionDetails")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.ResultSubmission", "ResultSubmission")
                        .WithMany("ResultSubmissionDetails")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("ResultSubmission");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.SubmissionDocument", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.ResultSubmission", "Submission")
                        .WithMany("SubmissionDocuments")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy");

                    b.Navigation("Submission");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.SubmissionResult", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Candidate", "Candidate")
                        .WithMany("SubmissionResults")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.ResultSubmission", "ResultSubmission")
                        .WithMany("SubmissionResults")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("ResultSubmission");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.User", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("Users")
                        .HasForeignKey("PollingStationId");

                    b.Navigation("PollingStation");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.UserAssociation", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.PollingStation", "PollingStation")
                        .WithMany("UserAssociations")
                        .HasForeignKey("PollingStationId");

                    b.HasOne("VcBlazor.Data.Entities.User", "User")
                        .WithMany("UserAssociations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VerificationHistory", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.User", "Checker")
                        .WithMany("VerificationHistories")
                        .HasForeignKey("CheckerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VcBlazor.Data.Entities.VerificationTask", "VerificationTask")
                        .WithMany("VerificationHistories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checker");

                    b.Navigation("VerificationTask");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VerificationTask", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.User", "Checker")
                        .WithMany("CheckerTasks")
                        .HasForeignKey("CheckerId");

                    b.HasOne("VcBlazor.Data.Entities.ResultSubmission", "ResultSubmission")
                        .WithMany("VerificationTasks")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checker");

                    b.Navigation("ResultSubmission");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VotingCenter", b =>
                {
                    b.HasOne("VcBlazor.Data.Entities.Commune", "Commune")
                        .WithMany("VotingCenters")
                        .HasForeignKey("CommuneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commune");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.AdministrativeDivision", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Arrondissement", b =>
                {
                    b.Navigation("Communes");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Candidate", b =>
                {
                    b.Navigation("ElectionResults");

                    b.Navigation("ResultSubmissionDetails");

                    b.Navigation("Results");

                    b.Navigation("SubmissionResults");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Commune", b =>
                {
                    b.Navigation("VotingCenters");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Department", b =>
                {
                    b.Navigation("Arrondissements");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.PollingStation", b =>
                {
                    b.Navigation("ElectionResults");

                    b.Navigation("HourlyTurnouts");

                    b.Navigation("ResultSubmissions");

                    b.Navigation("Results");

                    b.Navigation("UserAssociations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.PollingStationHierarchy", b =>
                {
                    b.Navigation("BureauAssignments");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.Region", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.ResultSubmission", b =>
                {
                    b.Navigation("ResultSubmissionDetails");

                    b.Navigation("SubmissionDocuments");

                    b.Navigation("SubmissionResults");

                    b.Navigation("VerificationTasks");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.User", b =>
                {
                    b.Navigation("AssignedByUser");

                    b.Navigation("CheckerTasks");

                    b.Navigation("RecordedTurnouts");

                    b.Navigation("SubmittedResults");

                    b.Navigation("SubmittedResultsSimple");

                    b.Navigation("UserAssignments");

                    b.Navigation("UserAssociations");

                    b.Navigation("VerificationHistories");

                    b.Navigation("VerifiedResults");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VerificationTask", b =>
                {
                    b.Navigation("VerificationHistories");
                });

            modelBuilder.Entity("VcBlazor.Data.Entities.VotingCenter", b =>
                {
                    b.Navigation("PollingStationsHierarchy");
                });
#pragma warning restore 612, 618
        }
    }
}
